{{/* gotype: github.com/jwilner/jsonschema2go.arrayPlanContext */}}
{{ if .Comment -}}
// {{ .Comment }}
{{ end -}}
{{ if .ID -}}
// generated from {{ .ID }}
{{ end -}}
type {{ .Type.Name }} []{{ $.QualName .ItemType }}

func (m {{ .Type.Name }}) MarshalJSON() ([]byte, error) {
    if m == nil {
        return []byte(`[]`), nil
    }
    return json.Marshal([]{{ $.QualName .ItemType }}(m))
}

{{ if .ItemValidateInitialize }}
var (
{{ range .ItemValidators -}}
{{ with $v := .VarExpr (.NameSpace $.Type.Name "Items") -}}
    {{ $v }}
{{ end -}}
{{ end -}}
)
{{ end -}}

func (m {{ $.Type.Name }}) Validate() error {
{{ range .Validators -}}
{{ if eq .Name "uniqueItems" -}}
    seen := make(map[{{$.QualName $.ItemType}}]bool)
    for _, v := range m {
        if seen[v] {
            return &{{ $.Type.Name }}ValidationError{
                errType: "uniqueItems",
                jsonField: "",
                field: "",
                message: fmt.Sprintf("items must be unique but %v occurs more than once", v),
            }
        }
        seen[v] = true
    }
{{ else -}}
	if {{ .TestExpr (.NameSpace $.Type.Name) "m" }} {
		return &{{ $.Type.Name }}ValidationError{
			"{{ .Name }}",
			"",
			"",
			fmt.Sprintf({{ .Sprintf (.NameSpace $.Type.Name) "m" }}),
		}
	}
{{ end -}}
{{ end -}}
{{ with .ItemValidators -}}
    for i := range m {
        {{ range . -}}
        {{ if eq .Name "subschema" -}}
        if err := m[i].Validate(); err != nil {
            return err
        }
        {{ else -}}
        if {{ .TestExpr (.NameSpace $.Type.Name "Items") "m[i]" }} {
            return &{{ $.Type.Name }}ValidationError{
                "{{ .Name }}",
                fmt.Sprintf("%d", i),
                fmt.Sprintf("%d", i),
                fmt.Sprintf({{ .Sprintf (.NameSpace $.Type.Name "Items") "m[i]" }}),
            }
        }
        {{ end -}}
        {{ end -}}
    }
{{ end -}}
	return nil
}

type {{ .Type.Name }}ValidationError struct {
    errType, jsonField, field, message string
}

func (e *{{ .Type.Name }}ValidationError) ErrType() string {
    return e.errType
}

func (e *{{ .Type.Name }}ValidationError) JSONField() string {
    return e.jsonField
}

func (e *{{ .Type.Name }}ValidationError) Field() string {
    return e.field
}

func (e *{{ .Type.Name }}ValidationError) Message() string {
    return e.message
}

func (e *{{ .Type.Name }}ValidationError) Error() string {
    return fmt.Sprintf("%v: %v", e.field, e.message)
}
