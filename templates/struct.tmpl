{{/* gotype: github.com/jwilner/jsonschema2go.structPlanContext */}}
{{ if .Comment -}}
// {{ .Comment }}
{{ end -}}
{{ if .ID -}}
// generated from {{ .ID }}
{{ end -}}
type {{ .Type.Name }} struct {
{{ range .Fields -}}
	{{ .FieldDecl }}
{{ end }}
}

{{ if .ValidateInitialize }}
var (
{{ range $Field := .Fields -}}
{{ range $Field.Validators -}}
	{{ .VarExpr (.NameSpace $.Type.Name $Field.Name) }}
{{ end -}}
{{ end -}}
)
{{ end -}}

func (m *{{ $.Type.Name }}) Validate() error {
{{ range .Fields -}}
{{ if .Required -}}
	if {{ .TestSetExpr false }} {
		return &validationError{
			errType: "required",
			message: "field required",
			path: []interface{}{"{{ .Name }}"},
			jsonPath: []interface{}{"{{ .JSONName }}"},
		}
	}
{{ end -}}
{{ end -}}
{{ range $Field := .Fields -}}
{{ range $Field.Validators -}}
{{ if eq .Name "subschema" -}}
    if err := m.{{ $Field.FieldRef }}.Validate(); err != nil {
		{{ if not $Field.Embedded -}}
		if err, ok := err.(valErr); ok {
        	return &validationError{
        		errType: err.ErrType(),
        		message: err.Message(),
				path: append([]interface{}{"{{ $Field.Name }}"}, err.Path()...),
				jsonPath: append([]interface{}{"{{ $Field.JSONName }}"}, err.JSONPath()...),
			}
		}
		{{ end -}}
		return err
	}
{{ else -}}
    if {{ if not $Field.Required -}}{{ $Field.TestSetExpr true }} &&{{ end -}}{{ .TestExpr ($Field.NameSpace) ($Field.DerefExpr) }} {
		return &validationError{
    		errType: "{{ .Name }}",
			path: []interface{}{"{{ $Field.Name }}"},
			jsonPath: []interface{}{"{{ $Field.JSONName }}"},
			message: fmt.Sprintf({{ .Sprintf ($Field.NameSpace) ($Field.DerefExpr) }}),
		}
	}
{{ end -}}
{{ end -}}
{{ end -}}
	return nil
}

{{ range $t := .Traits -}}
{{ if eq .Template "boxed.tmpl" }}
func (m *{{ $.Type.Name }}) MarshalJSON() ([]byte, error) {
    inner := struct {
{{ range $.Fields -}}
{{ .InnerFieldDecl }}
{{ end -}}
	} {
{{ range $.Fields -}}
{{ with .InnerFieldLiteral -}}
{{ . }}
{{ end -}}
{{ end -}}
	}
{{ range $.Fields -}}
{{ with .InnerFieldAssignment -}}
{{ . }}
{{ end -}}
{{ end -}}
	return json.Marshal(inner)
}

{{ else if eq .Template "discriminator.tmpl" }}
func (m *{{ $.Type.Name }}) UnmarshalJSON(data []byte) error {
	var discrim struct {
    {{ with .StructField -}}
        {{ .Name }} {{ if .Type.Pointer -}}*{{ end -}}{{ $.QualName .Type }} {{ if .Tag }}`{{ .Tag }}`{{ end }}
	{{ end }}
	}
	if err := json.Unmarshal(data, &discrim); err != nil {
		return err
	}
	switch discrim.{{ $t.StructField.Name }} {
	{{ range .Cases -}}
	case "{{ .Value }}":
		m.{{ $t.StructField.Name }} = new({{ $.QualName .TypeInfo }})
	{{ end -}}
    {{ with .Default -}}
	default:
        m.{{ $t.StructField.Name }} = new({{ $.QualName .TypeInfo }})
	{{ else -}}
	default:
		return fmt.Errorf("unknown discriminator: %v", discrim.{{ $t.StructField.Name }})
	{{ end -}}
	}
	return json.Unmarshal(data, m.{{ .StructField.Name }})
}

func (m *{{ $.Type.Name }}) MarshalJSON() ([]byte, error) {
	return json.Marshal(m.{{ .StructField.Name }})
}
{{ end }}
{{ end }}

