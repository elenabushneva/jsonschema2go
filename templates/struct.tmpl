{{/* gotype: github.com/jwilner/jsonschema2go.structPlanContext */}}
{{ if .Comment -}}
// {{ .Comment }}
{{ end -}}
{{ if .ID -}}
// generated from {{ .ID }}
{{ end -}}
type {{ .Type.Name }} struct {
{{ range .Fields -}}
    {{ range $Index, $Element := .Names -}}{{ if $Index -}}, {{ end -}}{{ . }}{{ end }} {{ if .Type.Array -}}[]{{ end -}}{{ if .Type.Pointer -}}*{{ end -}}{{ $.QualName .Type }} {{ if .Tag }}`{{ .Tag }}`{{ end }}
{{ end }}
}


{{ if .ValidateInitialize }}
var (
{{ range $Field := .Fields -}}
{{ range $Name := .Names -}}
{{ range $Field.Validators -}}
{{ with $v := .VarExpr (.NameSpace $.Type.Name $Name) -}}
	{{ $v }}
{{ end -}}
{{ end -}}
{{ end -}}
{{ end -}}
)
{{ end -}}

func (m *{{ $.Type.Name }}) Validate() error {
{{ range $Field := .Fields -}}
{{ range $Index, $Name := .Names -}}
{{ range $Field.Validators -}}
{{ if eq .Name "subschema" -}}
    if err := m.{{ $Name }}.Validate(); err != nil {
        return err
	}
{{ else -}}
    if {{ .TestExpr (.NameSpace $.Type.Name $Name) (printf "m.%s" $Name) }} {
		return &{{ $.Type.Name }}ValidationError{
    		errType: "{{ .Name }}",
			jsonField: "{{ index $Field.JSONNames $Index }}",
			field: "{{ $Name }}",
			message: fmt.Sprintf({{ .Sprintf (.NameSpace $.Type.Name $Name) (printf "m.%s" $Name) }}),
		}
	}
{{ end -}}
{{ end -}}
{{ end -}}
{{ end -}}
	return nil
}

{{ range $t := .Traits -}}
{{ if eq .Template "discriminator.tmpl" }}
func (m *{{ $.Type.Name }}) UnmarshalJSON(data []byte) error {
	var discrim struct {
    {{ with .StructField -}}
        {{ index .Names 0 }} {{ if .Type.Pointer -}}*{{ end -}}{{ $.QualName .Type }} {{ if .Tag }}`{{ .Tag }}`{{ end }}
	{{ end }}
	}
	if err := json.Unmarshal(data, &discrim); err != nil {
		return err
	}
	switch discrim.{{ index .StructField.Names 0 }} {
	{{ range .Cases -}}
	case "{{ .Value }}":
		m.{{ index $t.StructField.Names 0 }} = new({{ $.QualName .TypeInfo }})
	{{ end -}}
    {{ with .Default -}}
	default:
        m.{{ index $t.StructField.Names 0}} = new({{ $.QualName .TypeInfo }})
	{{ else -}}
	default:
		return fmt.Errorf("unknown discriminator: %v", discrim.{{ index .StructField.Names 0 }})
	{{ end -}}
	}
	return json.Unmarshal(data, m.{{ index .StructField.Names 0 }})
}

func (m *{{ $.Type.Name }}) MarshalJSON() ([]byte, error) {
	return json.Marshal(m.{{ index .StructField.Names 0 }})
}
{{ end }}
{{ end }}

type {{ .Type.Name }}ValidationError struct {
	errType, jsonField, field, message string
}

func (e *{{ .Type.Name }}ValidationError) ErrType() string {
	return e.errType
}

func (e *{{ .Type.Name }}ValidationError) JSONField() string {
	return e.jsonField
}

func (e *{{ .Type.Name }}ValidationError) Field() string {
	return e.field
}

func (e *{{ .Type.Name }}ValidationError) Message() string {
	return e.message
}

func (e *{{ .Type.Name }}ValidationError) Error() string {
	return fmt.Sprintf("%v: %v", e.field, e.message)
}

