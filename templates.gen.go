// Code generated by internal/cmd/gentmpl/gentmpl.go DO NOT EDIT.
package jsonschema2go

import (
	"text/template"
)

var valueTmpl *template.Template

func init() {
	valueTmpl = template.New("")
	valueTmpl = template.Must(valueTmpl.New("array.tmpl").Parse(`{{/* gotype: github.com/jwilner/jsonschema2go.arrayPlanContext */}}
{{ if .Comment -}}
// {{ .Comment }}
{{ end -}}
type {{ .Type.Name }} []{{ $.QualName .ItemType }}

func (m {{ .Type.Name }}) MarshalJSON() ([]byte, error) {
    if m == nil {
        return []byte(` + "`" + `[]` + "`" + `), nil
    }
    return json.Marshal([]{{ $.QualName .ItemType }}(m))
}
`))
	valueTmpl = template.Must(valueTmpl.New("enum.tmpl").Parse(`{{/* gotype: github.com/jwilner/jsonschema2go.enumPlanContext */}}
{{ if .Comment -}}
// {{ .Comment }}
{{ end -}}
type {{ .Type.Name }} {{ $.QualName .BaseType }}

const (
{{ range .Members -}}
    {{ $.Type.Name }}{{ .Name }} {{ $.Type.Name }}= {{ $.Literal .Field }}
{{ end }}
)
`))
	valueTmpl = template.Must(valueTmpl.New("struct.tmpl").Parse(`{{/* gotype: github.com/jwilner/jsonschema2go.structPlanContext */}}
{{ if .Comment -}}
// {{ .Comment }}
{{ end -}}
type {{ .Type.Name }} struct {
{{ range .Fields -}}
    {{ range $Index, $Element := .Names -}}{{ if $Index -}}, {{ end -}}{{ . }}{{ end }} {{ if .Type.Pointer -}}*{{ end -}}{{ $.QualName .Type }} {{ if .Tag }}` + "`" + `{{ .Tag }}` + "`" + `{{ end }}
{{ end }}
}

{{ range $t := .Traits -}}
{{ if eq .Template "discriminator.tmpl" }}
func (m *{{ $.Type.Name }}) UnmarshalJSON(data []byte) error {
	var discrim struct {
    {{ with .StructField -}}
        {{ index .Names 0 }} {{ if .Type.Pointer -}}*{{ end -}}{{ $.QualName .Type }} {{ if .Tag }}` + "`" + `{{ .Tag }}` + "`" + `{{ end }}
	{{ end }}
	}
	if err := json.Unmarshal(data, &discrim); err != nil {
		return err
	}
	switch discrim.{{ index .StructField.Names 0 }} {
	{{ range .Cases -}}
	case "{{ .Value }}":
		m.{{ index $t.StructField.Names 0 }} = new({{ $.QualName .TypeInfo }})
	{{ end -}}
	default:
		return fmt.Errorf("unknown discriminator: %v", discrim.{{ index .StructField.Names 0 }})
	}
	return json.Unmarshal(data, m.{{ index .StructField.Names 0 }})
}

func (m *{{ $.Type.Name }}) MarshalJSON() ([]byte, error) {
	return json.Marshal(m.{{ index .StructField.Names 0 }})
}
{{ end }}
{{ end }}
`))
	valueTmpl = template.Must(valueTmpl.New("values.tmpl").Parse(`{{/* gotype: github.com/jwilner/jsonschema2go.Plans */}}
package {{ .Imports.CurPackage }}

{{ with .Imports.List -}}
import (
{{ range . -}}
    {{ if .Alias -}}{{ .Alias }} {{ end -}}"{{ .GoPath }}"
{{ end -}}
)
{{ end -}}

{{ range .Structs -}}
{{ template "struct.tmpl" . }}
{{ end -}}

{{ range .Arrays -}}
{{ template "array.tmpl" . }}
{{ end -}}

{{ range .Enums }}
{{ template "enum.tmpl" . }}
{{ end -}}
`))
}
