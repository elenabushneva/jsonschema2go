// Code generated by jsonschema2go. DO NOT EDIT.
package foo

import (
	"encoding/json"
	"fmt"
)

// Bar gives you lots of dumb info
// generated from https://example.com/testdata/render/array_pattern/foo/bar.json
type Bar []string

func (m Bar) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte(`[]`), nil
	}
	return json.Marshal([]string(m))
}

var (
	barItemsPattern = regexp.MustCompile(`^[a-z]{10}$`)
)

func (m Bar) Validate() error {
	for i := range m {
		if len(m[i]) < 3 {
			return &BarValidationError{
				"minLength",
				fmt.Sprintf("%d", i),
				fmt.Sprintf("%d", i),
				fmt.Sprintf("must have length greater than 3 but was %d", len(m[i])),
			}
		}
		if !barItemsPattern.MatchString(m[i]) {
			return &BarValidationError{
				"pattern",
				fmt.Sprintf("%d", i),
				fmt.Sprintf("%d", i),
				fmt.Sprintf("must match '^[a-z]{10}$' but got %q", m[i]),
			}
		}
	}
	return nil
}

type BarValidationError struct {
	errType, jsonField, field, message string
}

func (e *BarValidationError) ErrType() string {
	return e.errType
}

func (e *BarValidationError) JSONField() string {
	return e.jsonField
}

func (e *BarValidationError) Field() string {
	return e.field
}

func (e *BarValidationError) Message() string {
	return e.message
}

func (e *BarValidationError) Error() string {
	return fmt.Sprintf("%v: %v", e.field, e.message)
}
