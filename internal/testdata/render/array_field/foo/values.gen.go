// Code generated by jsonschema2go. DO NOT EDIT.
package foo

import (
	"encoding/json"
	"fmt"
	"github.com/jwilner/jsonschema2go/boxed"
)

// generated from https://example.com/testdata/render/array_field/foo/example.json
type Example struct {
	Options ExampleOptions `json:"options,omitempty"`
}

func (m *Example) Validate() error {
	if err := m.Options.Validate(); err != nil {
		return err
	}
	return nil
}

// generated from https://example.com/testdata/render/array_field/foo/inner.json
type Inner struct {
	Name  boxed.String `json:"name"`
	Value interface{}  `json:"value,omitempty"`
}

func (m *Inner) Validate() error {
	return nil
}

func (m *Inner) MarshalJSON() ([]byte, error) {
	inner := struct {
		Name  *string     `json:"name,omitempty"`
		Value interface{} `json:"value,omitempty"`
	}{
		Value: m.Value,
	}
	if m.Name.Set {
		inner.Name = &m.Name.String
	}
	return json.Marshal(inner)
}

// generated from https://example.com/testdata/render/array_field/foo/example.json#/properties/options
type ExampleOptions []Inner

func (m ExampleOptions) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte(`[]`), nil
	}
	return json.Marshal([]Inner(m))
}

func (m ExampleOptions) Validate() error {
	for i := range m {
		if err := m[i].Validate(); err != nil {
			return err
		}
	}
	return nil
}

type validationError struct {
	errType, jsonField, field, message string
}

func (e *validationError) ErrType() string {
	return e.errType
}

func (e *validationError) JSONField() string {
	return e.jsonField
}

func (e *validationError) Field() string {
	return e.field
}

func (e *validationError) Message() string {
	return e.message
}

func (e *validationError) Error() string {
	return fmt.Sprintf("%v: %v", e.field, e.message)
}
