// Code generated by jsonschema2go. DO NOT EDIT.
package foo

import (
	"fmt"
	"regexp"
)

// Bar contains some info
type Bar struct {
	Baz   string `json:"baz,omitempty"`
	Count int    `json:"count,omitempty"`
}

var (
	barBazPattern = regexp.MustCompile(`^[0-9a-fA-F]{10}$`)
)

func (m *Bar) Validate() error {
	if !barBazPattern.MatchString(m.Baz) {
		return &BarValidationError{
			errType:   "pattern",
			jsonField: "baz",
			field:     "Baz",
			message:   fmt.Sprintf("must match '^[0-9a-fA-F]{10}$' but got %q", m.Baz),
		}
	}
	if m.Count < 3 {
		return &BarValidationError{
			errType:   "minimum",
			jsonField: "count",
			field:     "Count",
			message:   fmt.Sprintf("must be greater than or equal to 3 but was %v", m.Count),
		}
	}
	return nil
}

type BarValidationError struct {
	errType, jsonField, field, message string
}

func (e *BarValidationError) ErrType() string {
	return e.errType
}

func (e *BarValidationError) JSONField() string {
	return e.jsonField
}

func (e *BarValidationError) Field() string {
	return e.field
}

func (e *BarValidationError) Message() string {
	return e.message
}

func (e *BarValidationError) Error() string {
	return fmt.Sprintf("%v: %v", e.field, e.message)
}
