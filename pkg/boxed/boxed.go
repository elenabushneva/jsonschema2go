// Code generated by internal/cmd/boxedgen/boxedgen.go DO NOT EDIT.
package boxed

import (
	"encoding/json"
	"errors"
)

var (
	// ErrMarshalUnset is returned when you attempt to marshal an unset var
	ErrMarshalUnset = errors.New("marshalling unset var")
	// ErrNullInvalid is returned if marshalling null into a boxed field is attempted
	ErrNullInvalid = errors.New("null is invalid")
)

// Int64 wraps a int64 and provides information about whether or not the variable has been
// explicitly set.
type Int64 struct {
	Int64 int64
	Set   bool
}

// MarshalJSON writes the field as JSON; it is an error to marshal an unset field, in which case ErrMarshalUnset is
// returned. Otherwise, the field is marshalled as the value of its primitive.
func (m Int64) MarshalJSON() ([]byte, error) {
	if !m.Set {
		return nil, ErrMarshalUnset
	}
	return json.Marshal(m.Int64)
}

// UnmarshalJSON unmarshals JSON into a Int64. Null is explicitly disallowed. Set is set true when a
// value is successfully unmarshalled.
func (m *Int64) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return ErrNullInvalid
	}
	if err := json.Unmarshal(data, &m.Int64); err != nil {
		return err
	}
	m.Set = true
	return nil
}

// Float64 wraps a float64 and provides information about whether or not the variable has been
// explicitly set.
type Float64 struct {
	Float64 float64
	Set     bool
}

// MarshalJSON writes the field as JSON; it is an error to marshal an unset field, in which case ErrMarshalUnset is
// returned. Otherwise, the field is marshalled as the value of its primitive.
func (m Float64) MarshalJSON() ([]byte, error) {
	if !m.Set {
		return nil, ErrMarshalUnset
	}
	return json.Marshal(m.Float64)
}

// UnmarshalJSON unmarshals JSON into a Float64. Null is explicitly disallowed. Set is set true when a
// value is successfully unmarshalled.
func (m *Float64) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return ErrNullInvalid
	}
	if err := json.Unmarshal(data, &m.Float64); err != nil {
		return err
	}
	m.Set = true
	return nil
}

// String wraps a string and provides information about whether or not the variable has been
// explicitly set.
type String struct {
	String string
	Set    bool
}

// MarshalJSON writes the field as JSON; it is an error to marshal an unset field, in which case ErrMarshalUnset is
// returned. Otherwise, the field is marshalled as the value of its primitive.
func (m String) MarshalJSON() ([]byte, error) {
	if !m.Set {
		return nil, ErrMarshalUnset
	}
	return json.Marshal(m.String)
}

// UnmarshalJSON unmarshals JSON into a String. Null is explicitly disallowed. Set is set true when a
// value is successfully unmarshalled.
func (m *String) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return ErrNullInvalid
	}
	if err := json.Unmarshal(data, &m.String); err != nil {
		return err
	}
	m.Set = true
	return nil
}

// Bool wraps a bool and provides information about whether or not the variable has been
// explicitly set.
type Bool struct {
	Bool bool
	Set  bool
}

// MarshalJSON writes the field as JSON; it is an error to marshal an unset field, in which case ErrMarshalUnset is
// returned. Otherwise, the field is marshalled as the value of its primitive.
func (m Bool) MarshalJSON() ([]byte, error) {
	if !m.Set {
		return nil, ErrMarshalUnset
	}
	return json.Marshal(m.Bool)
}

// UnmarshalJSON unmarshals JSON into a Bool. Null is explicitly disallowed. Set is set true when a
// value is successfully unmarshalled.
func (m *Bool) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return ErrNullInvalid
	}
	if err := json.Unmarshal(data, &m.Bool); err != nil {
		return err
	}
	m.Set = true
	return nil
}
